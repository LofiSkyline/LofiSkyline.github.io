<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>通过git和GitHub实现代码版本控制</title>
    <link href="/2025/05/16/git%20&amp;%20github%20%E6%90%AD%E5%BB%BA%E5%92%8C%E9%93%BE%E6%8E%A5/"/>
    <url>/2025/05/16/git%20&amp;%20github%20%E6%90%AD%E5%BB%BA%E5%92%8C%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Git-与-GitHub-实现代码版本控制：从注册到部署的完整流程"><a href="#使用-Git-与-GitHub-实现代码版本控制：从注册到部署的完整流程" class="headerlink" title="使用 Git 与 GitHub 实现代码版本控制：从注册到部署的完整流程"></a>使用 Git 与 GitHub 实现代码版本控制：从注册到部署的完整流程</h1><p><img src="/img/post/blog2/git&github.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>借助 Git 的本地版本控制能力与 GitHub 的在线托管平台，你可以轻松实现跨设备、跨团队的协同开发。本篇博文将以 <strong>macOS 环境</strong> 为例，手把手演示从注册 GitHub 账号到推送首个仓库、再到解决网络端口问题的完整流程，并给出常见错误的排查思路。</p><hr><h2 id="1-注册-GitHub-账号"><a href="#1-注册-GitHub-账号" class="headerlink" title="1 注册 GitHub 账号"></a>1 注册 GitHub 账号</h2><ol><li>访问 <a href="https://github.com/">https://github.com</a>，点击 <strong>Sign up</strong>。</li><li>填写邮箱、密码、用户名，选择偏好的计划（Free 即可）。</li><li>通过邮箱验证完成注册，进入个人主页。</li><li>（可选）在 <strong>Settings → Profile</strong> 中完善头像与个人简介。</li></ol><blockquote><p><strong>提示</strong>：用户名一旦创建后更改会影响已有仓库路径，建议提前想好。</p></blockquote><hr><h2 id="2-安装与配置-Git"><a href="#2-安装与配置-Git" class="headerlink" title="2 安装与配置 Git"></a>2 安装与配置 Git</h2><h3 id="2-1-安装-Git"><a href="#2-1-安装-Git" class="headerlink" title="2.1 安装 Git"></a>2.1 安装 Git</h3><ul><li><p><strong>Homebrew</strong>（推荐）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure></li><li><p><strong>官方安装包</strong>：从 <a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a> 下载并安装。</p></li></ul><h3 id="2-2-配置用户名与邮箱"><a href="#2-2-配置用户名与邮箱" class="headerlink" title="2.2 配置用户名与邮箱"></a>2.2 配置用户名与邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name  <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;you@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list | grep user<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>--global</code> 作用域是当前用户；如需针对单个项目使用其他身份，可在仓库根目录重新执行上述命令但去掉 <code>--global</code>。</p></blockquote><hr><h2 id="3-生成并添加-SSH-Key"><a href="#3-生成并添加-SSH-Key" class="headerlink" title="3 生成并添加 SSH Key"></a>3 生成并添加 SSH Key</h2><h3 id="3-1-生成-SSH-密钥"><a href="#3-1-生成-SSH-密钥" class="headerlink" title="3.1 生成 SSH 密钥"></a>3.1 生成 SSH 密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;you@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>默认存放于 <code>~/.ssh/id_ed25519</code>，一路回车即可。</p><h3 id="3-2-将公钥写入剪贴板"><a href="#3-2-将公钥写入剪贴板" class="headerlink" title="3.2 将公钥写入剪贴板"></a>3.2 将公钥写入剪贴板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pbcopy &lt; ~/.ssh/id_ed25519.pub   <span class="hljs-comment"># macOS</span><br></code></pre></td></tr></table></figure><h3 id="3-3-添加到-GitHub"><a href="#3-3-添加到-GitHub" class="headerlink" title="3.3 添加到 GitHub"></a>3.3 添加到 GitHub</h3><ol><li>GitHub 右上角 <strong>Settings → SSH and GPG keys → New SSH key</strong>。</li><li>Title 可填 “MBP-2025”，粘贴公钥，保存。</li></ol><h3 id="3-4-测试连接"><a href="#3-4-测试连接" class="headerlink" title="3.4 测试连接"></a>3.4 测试连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>若看到 <code>Hi &lt;username&gt;! You&#39;ve successfully authenticated</code> 即表示成功。</p><hr><h2 id="4-解决网络端口与代理问题"><a href="#4-解决网络端口与代理问题" class="headerlink" title="4 解决网络端口与代理问题"></a>4 解决网络端口与代理问题</h2><p>在中国大陆或网络受限环境中，GitHub 链接可能会超时或速度缓慢，可通过配置代理或替换端口来提升稳定性。</p><h3 id="4-1-为-Git-设置全局代理"><a href="#4-1-为-Git-设置全局代理" class="headerlink" title="4.1 为 Git 设置全局代理"></a>4.1 为 Git 设置全局代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy  <span class="hljs-string">&quot;socks5://127.0.0.1:xxxx&quot;</span><br>git config --global https.proxy <span class="hljs-string">&quot;socks5://127.0.0.1:xxxx&quot;</span><br></code></pre></td></tr></table></figure><ul><li>基于使用的加速器使用的端口修改代理</li></ul><p>取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><h3 id="4-2-端口占用与冲突排查"><a href="#4-2-端口占用与冲突排查" class="headerlink" title="4.2 端口占用与冲突排查"></a>4.2 端口占用与冲突排查</h3><p>如果设置代理并且确保加速器已经正常工作</p><ul><li><p>确保本地代理端口未被占用。</p></li><li><p>使用 <code>lsof -i :7897</code> 检查进程。</p></li><li><p>若终端无法走代理，可在 <code>.zshrc</code> 中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7897&quot;</span><br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7897&quot;</span><br><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;socks5://127.0.0.1:7897&quot;</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="5-创建仓库并推送代码"><a href="#5-创建仓库并推送代码" class="headerlink" title="5 创建仓库并推送代码"></a>5 创建仓库并推送代码</h2><h3 id="5-1-在-GitHub-创建空仓库"><a href="#5-1-在-GitHub-创建空仓库" class="headerlink" title="5.1 在 GitHub 创建空仓库"></a>5.1 在 GitHub 创建空仓库</h3><ol><li>点击右上角 <strong>+ → New repository</strong>。</li><li>设定仓库名（如 <code>my-blog</code>）、描述与可见性（Public &#x2F; Private）。</li><li>先不要勾选 README &#x2F; .gitignore &#x2F; License，保持空仓库。</li></ol><h3 id="5-2-在本地初始化仓库"><a href="#5-2-在本地初始化仓库" class="headerlink" title="5.2 在本地初始化仓库"></a>5.2 在本地初始化仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> my-blog &amp;&amp; <span class="hljs-built_in">cd</span> my-blog<br>git init<br>git remote add origin git@github.com:&lt;username&gt;/my-blog.git<br></code></pre></td></tr></table></figure><h3 id="5-3-首次提交并推送"><a href="#5-3-首次提交并推送" class="headerlink" title="5.3 首次提交并推送"></a>5.3 首次提交并推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;# My Blog&quot;</span> &gt; README.md<br>git add .<br>git commit -m <span class="hljs-string">&quot;chore: initial commit&quot;</span><br>git branch -M main   <span class="hljs-comment"># 将默认分支重命名为 main</span><br><br>git push -u origin main<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：若推送失败且报 <code>permission denied</code>，请检查 SSH key 是否配置为 <strong>Write access</strong>，且本地代理设置未阻断 SSH 协议（22 或 443 端口）。</p></blockquote><hr><h2 id="6-分支管理（简述）"><a href="#6-分支管理（简述）" class="headerlink" title="6 分支管理（简述）"></a>6 分支管理（简述）</h2><ul><li><strong>feature&#x2F;xxx</strong>：功能开发分支，完成后合并到 <code>dev</code>。</li><li><strong>dev</strong>：日常集成分支，确保通过单元测试后再合并到 <code>main</code>。</li><li><strong>main</strong>：稳定可发布分支，用于生产环境部署。</li></ul><p>分支创建示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b feature/add-login<br></code></pre></td></tr></table></figure><hr><h2 id="7-部署与持续集成"><a href="#7-部署与持续集成" class="headerlink" title="7 部署与持续集成"></a>7 部署与持续集成</h2><h3 id="7-1-GitHub-Pages-快速部署静态站点"><a href="#7-1-GitHub-Pages-快速部署静态站点" class="headerlink" title="7.1 GitHub Pages 快速部署静态站点"></a>7.1 GitHub Pages 快速部署静态站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git subtree push --prefix=public origin gh-pages<br></code></pre></td></tr></table></figure><blockquote><p>或者在 <strong>Settings → Pages</strong> 选择 <code>main</code> 分支的 <code>/docs</code> 目录进行自动发布。</p></blockquote><h3 id="7-2-GitHub-Actions-持续集成（CI）"><a href="#7-2-GitHub-Actions-持续集成（CI）" class="headerlink" title="7.2 GitHub Actions 持续集成（CI）"></a>7.2 GitHub Actions 持续集成（CI）</h3><ul><li>在 <code>.github/workflows/ci.yml</code> 中编写构建脚本。</li><li>典型步骤：检查依赖 → 运行测试 → 构建 → 部署。</li></ul><hr><h2 id="8-常见问题与调试清单"><a href="#8-常见问题与调试清单" class="headerlink" title="8 常见问题与调试清单"></a>8 常见问题与调试清单</h2><table><thead><tr><th>问题</th><th>可能原因</th><th>解决方案</th></tr></thead><tbody><tr><td><code>fatal: not a git repository</code></td><td>忘记在项目根目录执行 <code>git init</code></td><td>切回项目根目录重新初始化</td></tr><tr><td><code>Permission denied (publickey)</code></td><td>SSH key 未添加或格式错误</td><td>重新生成并上传公钥，将私钥权限设为 <code>600</code></td></tr><tr><td>推送速度极慢 &#x2F; 超时</td><td>网络瓶颈或防火墙限制</td><td>配置代理或使用 <code>git config --global --add url.&quot;git@github.com:&quot;.insteadOf &quot;https://github.com/&quot;</code></td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>开发软技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2025/05/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><p>这是我写下的第一篇博客，通过 Hexo 搭建 使用Fluid主题</p><p>搭建博客纯属兴趣使然，我也会慢慢完善博客的内容</p><h2 id="这里是我的开发生活日记本"><a href="#这里是我的开发生活日记本" class="headerlink" title="这里是我的开发生活日记本"></a>这里是我的开发生活日记本</h2><ul><li>闲暇时间，我会在我的博客里我会记录下开发中碰到值得记录的问题</li><li>记录生活中值得铭记各个阶段</li></ul>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
